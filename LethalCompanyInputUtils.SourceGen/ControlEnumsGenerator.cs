using System.Collections.Generic;
using System.Linq;
using LethalCompanyInputUtils.SourceGen.Schema;
using Microsoft.CodeAnalysis;
using Newtonsoft.Json;

namespace LethalCompanyInputUtils.SourceGen;

[Generator]
public class ControlEnumsGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
        
    }

    public void Execute(GeneratorExecutionContext context)
    {
        var files = context.AdditionalFiles;

        foreach (var contents in Enumerable.OfType<AdditionalText>(files).Select(file => file.GetText()?.ToString()))
        {
            if (contents is null)
                return;

            var controlLayouts = JsonConvert.DeserializeObject<ControlLayouts>(contents);
            if (controlLayouts is null)
                continue;

            var layouts = new Dictionary<string, ControlLayout>();

            foreach (var layout in controlLayouts.Layouts)
            {
                if (!string.IsNullOrEmpty(layout.Extend) && layouts.TryGetValue(layout.Extend, out var parentLayout))
                {
                    var extendedControls = layout.Controls;
                    foreach (var extendedControl in extendedControls)
                        extendedControl.SourceLayout = layout.Name;
                    
                    var controls = new List<Control>(parentLayout.Controls);
                    controls.AddRange(extendedControls);

                    parentLayout.Controls = controls.ToArray();

                    layouts[layout.Extend] = parentLayout;
                }
                else
                {
                    layouts[layout.Name] = layout;
                }
            }

            foreach (var kvp in layouts)
            {
                var layout = kvp.Value;
                
                var builder = new SourceBuilder();
                
                var enumName = $"{layout.Name}Control";
                
                builder.AppendLine("// <auto-generated/>")
                    .AppendLine("")
                    .AppendLine("using System;")
                    .AppendLine("")
                    .AppendLine("namespace LethalCompanyInputUtils.BindingPathEnums;")
                    .AppendLine("")
                    .AppendLine($"public enum {enumName}")
                    .AppendLine("{")
                    .IncrementDepth();
                
                builder.AppendLine("/// <summary>")
                    .AppendLine("/// Unbound or No bind, Same as <see cref=\"Unbound\"/>")
                    .AppendLine("/// </summary>")
                    .AppendLine("None,");
                
                builder.AppendLine("/// <summary>")
                    .AppendLine("/// Unbound or No bind, Same as <see cref=\"None\"/>")
                    .AppendLine("/// </summary>")
                    .AppendLine("Unbound = None,");
                
                foreach (var control in layout.Controls)
                {
                    var variant = control.Name.ToPascalCase();

                    builder.AppendLine("/// <summary>")
                        .AppendLine($"/// Bind Path: &lt;{layout.Name}&gt;/{control.Name}")
                        .AppendLine("/// </summary>")
                        .AppendLine($"{variant},");
                }
                
                builder.DecrementDepth()
                    .AppendLine("}")
                    .AppendLine("");

                var enumVarName = enumName.ToCamelCase();

                builder.AppendLine($"public static class {enumName}Extensions")
                    .AppendLine("{")
                    .IncrementDepth()
                    .AppendLine($"public static string ToPath(this {enumName} {enumVarName})")
                    .AppendLine("{")
                    .IncrementDepth()
                    .AppendLine($"return {enumVarName} switch {{")
                    .IncrementDepth();
                
                builder.AppendLine($"{enumName}.None => \"\",");
                
                foreach (var control in layout.Controls)
                {
                    var variant = control.Name.ToPascalCase();

                    var layoutName = control.SourceLayout ?? layout.Name;
                
                    builder.AppendLine($"{enumName}.{variant} => \"<{layoutName}>/{control.Name}\",");
                }

                builder.AppendLine($"_ => throw new ArgumentOutOfRangeException(nameof({enumVarName}), {enumVarName}, null)")
                    .DecrementDepth()
                    .AppendLine("};")
                    .DecrementDepth()
                    .AppendLine("}")
                    .DecrementDepth()
                    .AppendLine("}");
                
                context.AddSource($"{enumName}.g.cs", builder.ToString());
            }
        }
    }
}